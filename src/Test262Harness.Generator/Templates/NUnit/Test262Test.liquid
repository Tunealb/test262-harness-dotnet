//----------------------
// <auto-generated>
//   Generated using the Test262Harness v{{ Version }}
//   GitHub SHA: {{ GitSha }}
//   Template SHA: {{ TemplateSha }}
//   Command line:  {{ CommandLine }}
//   Settings file: {{ SettingsFile }}
// </auto-generated>
//----------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using NUnit.Framework.Internal;

using Test262Harness;

namespace {{ Namespace }};

/// <summary>
/// Global state for test run. Generated test suite requires that Test262Stream is initialized before tests start to run.
/// </summary>
public static partial class State
{
    /// <summary>
    /// The GitHub SHA used to generate the test suite. Runner should initialize Test262Stream using this value.
    /// </summary>
    public const string GitHubSha = "{{ GitSha }}";

    public static Test262Stream Test262Stream { get; set; }

    public static Test262File[] HarnessFiles { get; set; }

    public static Func<Task<Test262Stream>> Test262StreamLoader { get; set; } = () => Test262StreamExtensions.FromGitHub(State.GitHubSha);
}

/// <summary>
/// Handles initializing testing state.
/// </summary>
[SetUpFixture]
public partial class TestHarness
{
    [OneTimeSetUp]
    public async Task RunBeforeAnyTests()
    {
        var stream = await State.Test262StreamLoader();
        State.Test262Stream = stream;
        State.HarnessFiles = State.Test262Stream.GetHarnessFiles().ToArray();

        await InitializeCustomState();
    }

    private static partial Task InitializeCustomState();
}


[Timeout(20_000)]
{% if Parallel -%}
[Parallelizable(ParallelScope.All)]
{% endif -%}
public abstract partial class Test262Test
{
    protected void RunTestCode(string test, bool strict)
    {
        var testCase = State.Test262Stream.GetTestFile(test);
        if (strict)
        {
            testCase = testCase.AsStrict();
        }

        var executor = BuildTestExecutor(testCase);

        string lastError = null;
        try
        {
            ExecuteTest(executor, testCase);
        }
        catch (Exception e)
        {
            lastError = e.ToString();
        }

        if (!testCase.Negative && !string.IsNullOrWhiteSpace(lastError))
        {
            // create friendly formatted code as we have different line numbers compared to original file having comments etc
            var code = string.Join(Environment.NewLine, testCase.Program.Split('\n').Select((x, i) => $"{i + 1:00}: {x}"));
            var message = $"{Environment.NewLine}{testCase.FileName}{Environment.NewLine}{Environment.NewLine}{lastError}{Environment.NewLine}{code}";
            throw new NUnitException(message);
        }
    }
}
